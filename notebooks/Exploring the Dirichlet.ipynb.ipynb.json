{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import scipy.stats as ss\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "hypotheses = [[.8, .2], [.5,.5], [.2,.8]]\n",
    "pdf_score = np.array([ss.beta.pdf(hypothesis[0], 1+1,1+5) for hypothesis in hypotheses])\n",
    "probabilities = pdf_score/pdf_score.sum()\n",
    "\n",
    "list(zip(hypotheses, probabilities))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[([0.8, 0.2], 0.00071554864238494969),\n",
       " ([0.5, 0.5], 0.26656264155542536),\n",
       " ([0.2, 0.8], 0.73272180980218971)]"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hypotheses = [[.8, .2], [.5,.5], [.2,.8]]\n",
    "pdf_score = np.array([ss.beta.pdf(hypothesis[0], 1+1+2,1+5+3) for hypothesis in hypotheses])\n",
    "probabilities = pdf_score/pdf_score.sum()\n",
    "\n",
    "list(zip(hypotheses, probabilities))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.00314431,  0.19191324,  0.80494246])"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pdf_array = np.array([ss.beta.pdf(0.8, 2, 6), ss.beta.pdf(0.5, 2, 6), ss.beta.pdf(0.2, 2, 6)])\n",
    "pdf_array/pdf_array.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[([0.8, 0.2], 0.00071554864238495164), ([0.5, 0.5], 0.26656264155542514), ([0.2, 0.8], 0.73272180980218982)]\n"
     ]
    }
   ],
   "source": [
    "hypotheses = [[.8, .2], \n",
    "              [.5,.5], \n",
    "              [.2,.8]]\n",
    "# Notice how we swapped out the Beta for\n",
    "# a Dirichlet. The only difference is we\n",
    "# now pass a list of counts to the pdf\n",
    "# function. We'll get to why in a bit.\n",
    "pdf_score = np.array([ss.dirichlet.pdf(hypothesis, [1+1+2,1+5+3]) for hypothesis in hypotheses])\n",
    "probabilities = pdf_score/pdf_score.sum()\n",
    "\n",
    "print(list(zip(hypotheses, probabilities)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "hypotheses = [[1/3,1/3,1/3], [.8, .1, .1], [.1,.8,.1],[.1,.1,.8]]\n",
    "pdf_score = np.array([ss.dirichlet.pdf(hypothesis, [1+1, 1+5, 1+2]) for hypothesis in hypotheses])\n",
    "probabilities = pdf_score/pdf_score.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[([0.3333333333333333, 0.3333333333333333, 0.3333333333333333],\n",
       "  0.31699414486454858),\n",
       " ([0.8, 0.1, 0.1], 0.00016638388675650501),\n",
       " ([0.1, 0.8, 0.1], 0.68150840015464287),\n",
       " ([0.1, 0.1, 0.8], 0.0013310710940520379)]"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(zip(hypotheses, probabilities))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[([0.3333333333333333, 0.3333333333333333, 0.3333333333333333],\n",
       "  0.31699414486454858),\n",
       " ([0.8, 0.1, 0.1], 0.00016638388675650501),\n",
       " ([0.1, 0.8, 0.1], 0.68150840015464287),\n",
       " ([0.1, 0.1, 0.8], 0.0013310710940520379)]"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hypotheses = [[1/3,1/3,1/3], [.8, .1, .1], [.1,.8,.1],[.1,.1,.8]]\n",
    "pdf_score = np.array([ss.dirichlet.pdf(hypothesis, [1+1, 1+5, 1+2]) for hypothesis in hypotheses])\n",
    "probabilities = pdf_score/pdf_score.sum()\n",
    "list(zip(hypotheses, probabilities))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[([0.3333333333333333, 0.3333333333333333, 0.3333333333333333],\n",
       "  0.85202998933671381),\n",
       " ([0.8, 0.1, 0.1], 7.042002669045256e-08),\n",
       " ([0.1, 0.8, 0.1], 0.14768149981393544),\n",
       " ([0.1, 0.1, 0.8], 0.00028844042932409396)]"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hypotheses = [[1/3,1/3,1/3], [.8, .1, .1], [.1,.8,.1],[.1,.1,.8]]\n",
    "pdf_score = np.array([ss.dirichlet.pdf(hypothesis, [1+1+1, 1+5+4, 1+2+4]) for hypothesis in hypotheses])\n",
    "probabilities = pdf_score/pdf_score.sum()\n",
    "list(zip(hypotheses, probabilities))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
